(defwindow bar
           :monitor 1
           :geometry (geometry :x "0px"
                               :y "5px"
                               :width "98%"
                               :height "30px"
                               :anchor "top center")
           :stacking "fg"
           :windowtype "dock"
           :wm-ignore false
	         :exclusive true
           :class "bar"

        (box :orientation "h"
             :halign "fill"
             :valign "center"
             :class "bar-content"

             (box :orientation "h"
                  :halign "start"
                  :valign "center"
                  :class "bar-left"
      
                  (menuButton)
                  (workspaces))
                  

              (box :orientation "h"
                  :halign "end"
                  :valign "center"
                  :class "bar-end"

                  (volume)
                  (cpu-temp)
                  (date)
                  (time))))
      

(defvar name "Ivan Stoychev")
(defpoll time :initial "time" :interval "1s" :run-white time-visible `date +"%H:%M:%S"`)
(defpoll date :initial "date" :interval "1s" :run-white date-visible `date +"%d/%m/%Y"`)
(defpoll uptime :initial "uptime" :interval "1s" :run-white uptime-visible `uptime -p | sed 's/up //g' | sed 's/,//g'`)

(defwindow menu 
    :monitor 1
    :geometry (geometry :x "0px"
                        :y "-30px"
                        :width "100%"
                        :height "100%"
                        :anchor "top center")
    :stacking "fg"
    :windowtype "dock"
    :wm-ignore false
    :exclusive false
    :class "menu"
(menuContent))

(defwidget menuContent []
  (box :orientation "h"
             :halign "center"
             :valign "center"
             :class "menuContent"
            (aboutMe)
            (time-info)
            (buttons)))

(defwidget buttons [] 
  (box :orientation "v"
        :halign "fill"
        :valign "center"
        :class "buttons"
        :height 300
        (shutdown)
        (restart)
        (lock)
        (back)))

(defwidget back []
  (button :orientation "horizontal"
         :halign "fill" 
         :valign "center"
         :active true
         :class "back btn"
         :width 80
         :height 85
         :onclick "eww close menu" ))

(defwidget lock []
  (button :orientation "horizontal"
         :halign "fill" 
         :valign "center"
         :active true
         :class "lock btn"
         :width 80
         :height 85
         :onclick "eww close menu | swaylock --screenshots --effect-blur 7x5 --clock --effect-vignette 0.5:0.5" ))

(defwidget restart []
  (button :orientation "horizontal"
         :halign "fill" 
         :valign "center"
         :active true
         :class "restart btn"
         :width 80
         :height 85
         :onclick "reboot" ))

(defwidget shutdown []
  (button :orientation "horizontal"
         :halign "fill" 
         :valign "center"
         :active true
         :class "shutdown btn"
         :width 80
         :height 85
         :onclick "poweroff" ))

(defwidget time-info []
    (box :orientation "v"
         :halign "fill"
         :valign "center"
         :valign "top"
         :class "time-info"
        (clock)
        (uptime)
        (search)))

(defwidget search []
    (button :orientation "v"
         :halign "start"
         :valign "top"
         :class "search btn"
         :height 100
         :width 300
        :onclick "eww close menu | wofi -c ~/.config/wofi/config"))

(defwidget uptime []
    (box :orientation "v"
         :halign "start"
         :valign "top"
         :class "uptime"
         :width 300
         "Uptime:"
        "${uptime}"))


(defwidget aboutMe []
    (box :orientation "v"
         :halign "fill"
         :valign "center"
         :class "aboutMe"
         :width 200
         :height 300
        
        (avatar)
        (info)))

(defwidget avatar []
    (image   :width 150
             :height 150
             :halign "center"
             :valign "center"
             :class "avatar"))

(defwidget info []
    (box :orientation "v"
         :halign "center"
         :valign "center"
         :class "info"
        "${name}"))

(defwidget clock []
    (box :orientation "v"
         :halign "start"
         :valign "top"
         :class "clock"
         :width 300
         :height 100 
        "${time}"
        "${date}"))

(defwidget menuButton []
  (button :orientation "horizontal"
         :halign "start" 
         :active true
         :class "menuButton"
         :onclick "eww open menu" ))

; ----------------- WORK SPACES -----------------
(defpoll activeWorkspace :interval "0.5s" :initial "none" :run-while true `hyprctl activewindow | grep "workspace: " | cut -d' ' -f2`)

(defwidget workspaces []
  (box :class "workspaces"
       :orientation "h"
       :space-evenly true
       :halign "start"

    (button :class {activeWorkspace == "1" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 1" 1)
    (button :class {activeWorkspace == "2" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 2" 2)
    (button :class {activeWorkspace == "3" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 3" 3)
    (button :class {activeWorkspace == "4" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 4" 4)
    (button :class {activeWorkspace == "5" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 5" 5)
    (button :class {activeWorkspace == "6" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 6" 6)
    (button :class {activeWorkspace == "7" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 7" 7)
    (button :class {activeWorkspace == "8" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 8" 8)
    (button :class {activeWorkspace == "9" ? "workspace-btn active" : "workspace-btn"} :onclick "hyprctl dispatch workspace 9" 9)))
  

; ----------------- BAR END -------------

(defwidget time []
  (box :orientation "h"
       :halign "end"
       :valign "center"
       :class "time"
       "${time}"))

(defwidget date []
  (box :orientation "h"
       :halign "end"
       :valign "center"
       :class "date"
       "${date}"))

(defpoll cpu-temp :interval "1s" :initial "cpu-temp" :run-white cpu-temp-visible `sensors | grep "Core 0" | cut -d' ' -f10 | cut -d'+' -f2`)

(defwidget cpu-temp []
  (box :orientation "h"
       :halign "end"
       :valign "center"
       :class "cpu-temp"
       "${cpu-temp}"))

(defpoll volume :interval "0.5s" :initial "volume" :run-white volume-visible `pactl list sinks | perl -000ne 'if(/#1/){/(Volume:.*)/; print "$1\n"}' | grep "mono" | cut -d'/' -f2 | cut -d' ' -f3`)

(defwidget volume []
  (box :orientation "h"
       :halign "end"
       :valign "center"
       :class "volume"
       "${volume}"))